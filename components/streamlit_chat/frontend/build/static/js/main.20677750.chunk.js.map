{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","handleFeedback","value","Streamlit","setComponentValue","render","setFrameHeight","window","innerHeight","props","args","isUser","avatarStyle","seed","message","logo","avatarUrl","theme","Avatar","styled","img","border","borderRadius","height","width","margin","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","whiteSpace","ButtonContainer","justifyContent","marginTop","textAlign","outline","Button","button","marginLeft","cursor","alignItems","backgroundColor","primaryColor","fontFamily","font","css","src","alt","draggable","onClick","color","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"qSAYMA,E,4MACJC,eAAiB,SAACC,GAEhBC,IAAUC,kBAAkBF,I,EAEvBG,OAAS,WACdF,IAAUG,eAAeC,OAAOC,aAChC,MAAqD,EAAKC,MAAMC,KAAxDC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,KACtCC,EAAcD,GAAF,uCAA+CH,EAA/C,qBAAuEC,GAKjFI,EAAU,EAAKR,MAAfQ,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBACPC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAIJC,EAAUP,IAAOQ,IAAI,CACzBC,QAAS,eACTC,WAAYZ,EAAMa,yBAClBT,OAAQ,wBACRC,aAAc,OACdS,QAAS,YACTN,OAAQ,WACRO,SAAU,MACVC,WAAY,aAERC,EAAkBf,IAAOQ,IAAI,CACjCC,QAAS,OACTO,eAAgB,WAChBC,UAAW,OACXC,UAAW,SACXC,QAAS,SAGLC,EAASpB,IAAOqB,OAAO,CAC3BhB,MAAO,OACPD,OAAQ,OACRkB,WAAY,OACZnB,aAAc,MACdD,OAAQ,OACRqB,OAAQ,UACRd,QAAS,OACTO,eAAgB,SAChBQ,WAAY,SAEZd,WAAYZ,EAAMa,yBAClBQ,QAAS,OACTD,UAAW,SACX,UAAW,CACTO,gBAAiB3B,EAAM4B,gBAKrB7C,EAAOmB,IAAOQ,IAAI,CACtBC,QAAS,OAETkB,WAAW,GAAD,OAAK7B,EAAM8B,KAAX,sCACVxB,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAET,SAACf,GACC,OAAIA,EAAME,OACDqC,YAAP,8IAOKA,YAAP,6BAGF,OACE,kBAAC,EAAD,CAAMrC,OAAQA,GACZ,kBAACO,EAAD,CAAQ+B,IAAKjC,EAAWkC,IAAI,UAAUC,UAAU,UAChD,kBAACzB,EAAD,KAAUZ,IACRH,GACE,kBAACuB,EAAD,KACE,kBAACK,EAAD,CAAQa,QAAS,kBAAM,EAAKnD,eAAe,UAAS,kBAAC,IAAD,CAAYoD,MAAM,WACtE,kBAACd,EAAD,CAAQa,QAAS,kBAAM,EAAKnD,eAAe,aAAY,kBAAC,IAAD,CAAcoD,MAAM,c,yBAhGtEC,KAwGJC,cAAwBvD,GChHvCwD,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.20677750.chunk.js","sourcesContent":["import {\r\n  // eslint-disable-next-line \r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport styled from '@emotion/styled'\r\nimport { css } from '@emotion/react'\r\nimport { FaThumbsUp,FaThumbsDown } from \"react-icons/fa\";\r\n\r\n\r\nclass Chat extends StreamlitComponentBase {\r\n  handleFeedback = (value:string) => {\r\n    // Call the onClick callback function for \"like\" button\r\n    Streamlit.setComponentValue(value)\r\n  };\r\n  public render = (): ReactNode => {\r\n    Streamlit.setFrameHeight(window.innerHeight)\r\n    const { isUser, avatarStyle, seed, message, logo } = this.props.args;\r\n    const avatarUrl = !!logo ? logo: `https://api.dicebear.com/5.x/${avatarStyle}/svg?seed=${seed}`\r\n    \r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    \r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (!theme) {\r\n      return <div>Theme is undefined, please check streamlit version.</div>\r\n    }\r\n    \r\n    // styles for the avatar image\r\n    const Avatar = styled.img({\r\n      border: `1px solid transparent`,\r\n      borderRadius: '50%',\r\n      height: '3rem',\r\n      width: '3rem',\r\n      margin: 0\r\n    })\r\n    \r\n    // styles for the message box\r\n    const Message = styled.div({\r\n      display: 'inline-block',\r\n      background: theme.secondaryBackgroundColor,\r\n      border: '1px solid transparent',\r\n      borderRadius: '10px',\r\n      padding: '10px 14px',\r\n      margin: '5px 20px',\r\n      maxWidth: '70%',\r\n      whiteSpace: 'pre-line'\r\n    })\r\n    const ButtonContainer = styled.div({\r\n      display: \"flex\",\r\n      justifyContent: \"flex-end\",\r\n      marginTop: \"10px\",\r\n      textAlign: \"center\",\r\n      outline: \"none\"\r\n    });\r\n\r\n    const Button = styled.button({\r\n      width: \"2rem\",\r\n      height: \"2rem\",\r\n      marginLeft: \"10px\",\r\n      borderRadius: \"50%\",\r\n      border: \"none\",\r\n      cursor: \"pointer\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      // transition: \"background-color 0.3s ease\",\r\n      background: theme.secondaryBackgroundColor,\r\n      outline: \"none\",\r\n      textAlign: \"center\",\r\n      \":active\": {\r\n        backgroundColor: theme.primaryColor,\r\n      },\r\n    });\r\n    \r\n    // styles for the container\r\n    const Chat = styled.div({\r\n      display: 'flex',\r\n      // flexDirection: 'row',\r\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \r\n      height: 'auto',\r\n      margin: 0,\r\n      width: '100%'\r\n    }, \r\n    (props: {isUser: boolean}) => {  // specific styles\r\n      if (props.isUser){\r\n        return css`\r\n          flex-direction: row-reverse;\r\n          & > div {\r\n            text-align: right;\r\n          }\r\n        `\r\n      }\r\n      return css``\r\n    })\r\n\r\n    return (\r\n      <Chat isUser={isUser}>\r\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\r\n        <Message>{message}</Message>\r\n        {!isUser && (\r\n            <ButtonContainer>\r\n              <Button onClick={() => this.handleFeedback('like')}><FaThumbsUp color=\"white\"></FaThumbsUp></Button>\r\n              <Button onClick={() => this.handleFeedback('dislike')}><FaThumbsDown color=\"white\"></FaThumbsDown></Button>\r\n            </ButtonContainer>\r\n        )}\r\n      </Chat>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(Chat);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Chat from \"./stChat\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Chat />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}